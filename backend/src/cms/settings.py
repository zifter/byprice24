"""
Django settings for cms project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os

import sentry_sdk
from common.paths import BACKEND_DIR
from common.shared_queue.redis_queue import CRAWLER_FEED
from common.shared_queue.redis_queue import CRAWLER_RESULT
from common.shared_queue.redis_queue import SEARCH_QUERY
from configurations import Configuration
from sentry_sdk.integrations.django import DjangoIntegration


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


def redis_url(env_prefix='', host='localhost', port=6379, db=0) -> str:
    host = os.getenv(f'{env_prefix}REDIS_HOST', host)
    port = os.getenv(f'{env_prefix}REDIS_PORT', port)
    db = os.getenv(f'{env_prefix}REDIS_DB', db)
    return f'redis://{host}:{port}/{db}'


class Base(Configuration):
    # SECURITY WARNING: keep the secret key used in production secret!
    # TODO Override secret in production
    SECRET_KEY = os.environ.setdefault('SECRET_KEY', 'django-insecure-tfv^rapkl5+j5&c+x64-iy3#m+hpmhyj10f^b(ww2xxu&_#78+')

    ALLOWED_HOSTS = list({
        '0.0.0.0',
        os.environ.setdefault('POD_IP', '127.0.0.1'),
        os.environ.setdefault('DOMAIN_API', 'localhost'),
        os.environ.setdefault('DOMAIN_ADMIN', 'localhost'),
    })

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'django_elasticsearch_dsl',
        'drf_spectacular',
        'rest_framework',
        'health_check',
        'health_check.db',
        'health_check.storage',
        'health_check.contrib.migrations',
        'django_rq',
        'backoffice',
        'marketplace',
        'crawler',
        'search',
    ]

    REST_FRAMEWORK = {
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
        'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    }

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'cms.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'cms.wsgi.application'

    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    DEBUG = True

    SWAGGER_API = False

    FIXTURE_DIRS = [
        os.path.join(BACKEND_DIR, 'fixtures'),
    ]

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'console': {
                'format': '%(asctime)s %(message)s',
                'datefmt': '%H:%M:%S',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'rq.utils.ColorizingStreamHandler',
                'formatter': 'console',
                'exclude': ['%(asctime)s'],
            },
        },
        'loggers': {
            'root': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        }
    }

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = '/admin-static/'

    STATIC_ROOT = os.path.join(BACKEND_DIR, 'static')

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    RQ_QUEUES = {
        CRAWLER_FEED: {
            'URL': redis_url(env_prefix='RQ_'),
        },
        CRAWLER_RESULT: {
            'URL': redis_url(env_prefix='RQ_'),
        },
        SEARCH_QUERY: {
            'URL': redis_url(env_prefix='RQ_'),
        }
    }

    RQ_SHOW_ADMIN_LINK = True

    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': redis_url(env_prefix='STORAGE_'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

    # https://django-elasticsearch-dsl.readthedocs.io/en/latest/quickstart.html
    ELASTICSEARCH_DSL = {
        'default': {
            'hosts': os.getenv('ELASTICSEARCH_DSL', 'localhost:9200'),
        },
    }

    SPECTACULAR_SETTINGS = {
        'TITLE': 'FindPrice API',
        'DESCRIPTION': 'Aggregator of Belarusian marketplaces',
    }


class PostgresMixin:
    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'byprice24'),
            'USER': os.getenv('DB_USERNAME', 'root'),
            'PASSWORD': os.getenv('DB_PASSWORD', '1234'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }


class SentryMixin:
    # Sentry
    SENTRY_DSN = os.environ.setdefault('SENTRY_DSN', '')

    def __init__(self):
        sentry_sdk.init(dsn=SentryMixin.SENTRY_DSN, integrations=[DjangoIntegration(), ])  # pragma: no cover


class Dev(PostgresMixin, Base):
    # Dev configuration (for example, in pycharm)
    SWAGGER_API = True
    pass


class Test(Dev):
    # Configuration will be used for while running tests
    pass


class Local(SentryMixin, Dev):
    # Will be used in Local k8s cluster
    pass


class Prod(Local):
    # Local k8s cluster
    # TODO Make it False and run behind wsgi server (gunicron)
    # TODO Need to share static via CDN
    # DEBUG = False
    pass
